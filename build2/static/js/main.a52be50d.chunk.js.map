{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js","../ignored /home/kevin/Projects/this-repro/node_modules/readable-stream/lib/internal/streams util","../ignored /home/kevin/Projects/this-repro/node_modules/readable-stream/lib util","webpack:///./src/App.css?8082","webpack:///./src/index.css?1296","../config/polyfills.js"],"names":["console","log","Multipart","App","isLocalhost","Boolean","window","location","hostname","match","register","config","navigator","publicUrl","URL","origin","addEventListener","swUrl","checkValidServiceWorker","serviceWorker","ready","then","registerValidSW","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","fetch","response","status","headers","get","indexOf","unregister","reload","ReactDOM","render","document","getElementById","Promise","require","enable","Object","assign"],"mappings":"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","file":"static/js/main.a52be50d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Multipart from \"ipfs-api/src/utils/multipart\";\n\nconsole.log(new Multipart());\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Edit <code>src/App.js</code> and save to reload.\n          </p>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Learn React\n          </a>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","/* (ignored) */","/* (ignored) */","// extracted by mini-css-extract-plugin","// extracted by mini-css-extract-plugin","'use strict';\n\nif (typeof Promise === 'undefined') {\n  // Rejection tracking prevents a common issue where React gets into an\n  // inconsistent state due to an error, but it gets swallowed by a Promise,\n  // and the user has no idea what causes React's erratic future behavior.\n  require('promise/lib/rejection-tracking').enable();\n  window.Promise = require('promise/lib/es6-extensions.js');\n}\n\n// fetch() polyfill for making API calls.\nrequire('whatwg-fetch');\n\n// Object.assign() is commonly used with React.\n// It will use the native implementation if it's present and isn't buggy.\nObject.assign = require('object-assign');\n\n// In tests, polyfill requestAnimationFrame since jsdom doesn't provide it yet.\n// We don't polyfill it in the browser--this is user's responsibility.\nif (process.env.NODE_ENV === 'test') {\n  require('raf').polyfill(global);\n}\n"],"sourceRoot":""}